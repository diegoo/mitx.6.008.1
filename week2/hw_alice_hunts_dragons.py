#!/usr/bin/python3
# -*- coding: utf-8 -*-

X = [1, 2, 3, 4]
Y = [1, 2, 3]

#     1    2    3
# -----------------
# 1|  2    0    10
# 2|  5    0    13
# 3|  0    0     0
# 4| 17    0    25

X_all = 2+10+5+13+17+25
Y_all = 2+5+17+10+13+25
assert X_all == 72
assert Y_all == 72

P_X = {1:12/72.0, 2:18/72.0, 3:0, 4:42/72.0}
# {1: 0.16666666666666666, 2: 0.25, 3: 0, 4: 0.5833333333333334}

P_Y = {1:24/72.0, 2:0, 3:48/72.0}
# {1: 0.3333333333333333, 2: 0, 3: 0.6666666666666666}

# {
#  (1, 1): 2
#  (1, 2): 0
#  (1, 3): 10
#  (2, 1): 5
#  (2, 2): 0
#  (2, 3): 13
#  (3, 1): 0
#  (3, 2): 0
#  (3, 3): 0
#  (4, 1): 17
#  (4, 2): 0
#  (4, 3): 25
# }

xy = {}
for x in X:
    for y in Y:
        if x != 3 and y != 2:
            z = x**2 + y**2
        else:
            z = 0
        xy[(x, y)] = z
print(xy)

normalizer = float(sum(xy.values()))
# 72.0

prob_space = { (x,y): float(z) / normalizer for ((x,y),z) in xy.items() }
assert sum(prob_space.values()) == 1.0

# {(1, 1): 0.027777777777777776,
#  (1, 2): 0.0,
#  (1, 3): 0.1388888888888889,
#  (2, 1): 0.06944444444444445,
#  (2, 2): 0.0,
#  (2, 3): 0.18055555555555555,
#  (3, 1): 0.0,
#  (3, 2): 0.0,
#  (3, 3): 0.0,
#  (4, 1): 0.2361111111111111,
#  (4, 2): 0.0,
#  (4, 3): 0.3472222222222222}

# --------------------------------------------------------------------------------

Y_less_than_X = dict(filter(lambda e: e[0][1] < e[0][0], prob_space.items()))

# {(2, 1): 0.06944444444444445,
#  (3, 1): 0.0,
#  (3, 2): 0.0,
#  (4, 1): 0.2361111111111111,
#  (4, 2): 0.0,
#  (4, 3): 0.3472222222222222}

sum(Y_less_than_X.values())
# 0.6527777777777777

X_less_than_Y = dict(filter(lambda e: e[0][0] < e[0][1], prob_space.items()))
# {(1, 2): 0.0,
#  (1, 3): 0.1388888888888889,
#  (2, 3): 0.18055555555555555}

sum(X_less_than_Y.values())
# 0.3194444444444444 

X_equal_Y = dict(filter(lambda e: e[0][0] == e[0][1], prob_space.items()))
# {(1, 1): 0.027777777777777776,
#  (2, 2): 0.0, (3, 3): 0.0}

sum(X_equal_Y.values())
# 0.027777777777777776

Y_is_3 = dict(filter(lambda e: e[0][1] == 3, prob_space.items()))
# {(1, 3): 0.1388888888888889,
#  (2, 3): 0.18055555555555555,
#  (3, 3): 0.0,
#  (4, 3): 0.3472222222222222}

sum(Y_is_3.values())
# 0.6666666666666666
